version: "1.0"
stages:
  - clone
  - build
  - metadata
  - dev
  - qa
  - staging
  - prod

hooks:
  on_fail:
    steps:
      exec:
        type: slack-post-channel:0.0.7
        arguments:
          SLACK_TOKEN: ${{LR_SLACK_TOKEN}}
          SLACK_CHANNEL: topic-codefresh-demo
          SLACK_MESSAGE: "CICD build for color failed. See ${{CF_BUILD_URL}}"

steps:
  clone:
    title: "Cloning repository"
    stage: clone
    type: "git-clone"
    depth: 1
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_BRANCH}}"
    git: "github"

  pickupColor:
    title: "extract color from commit message"
    stage: clone
    image: ubuntu
    commands:
      - |
        export COLOR=$(echo "${CF_COMMIT_MESSAGE}" | awk -F":" '{print $1}')
        cf_export COLOR=$COLOR

  build:
    title: "Building Docker image"
    type: "build"
    image_name: "aperturesci/rollouts-demo"
    working_directory: "${{clone}}"
    tag: "${{CF_SHORT_REVISION}}"
    dockerfile: "Dockerfile"
    registry: dockerhub
    stage: "build"
    build_arguments:
      - COLOR=${{COLOR}}
      - LATENCY=0
      - ERROR_RATE=0
    metadata:
      set:
        - color: ${{COLOR}}
    on_success:
      annotations:
        set:
          - annotations:
              - sha: ${{CF_SHORT_REVISION}}
              - color: ${{COLOR}}
            display: color

  prepcosign:
    title: Fetch Cosign and Docker Keys
    image: ubuntu:lunar
    stage: metadata
    commands:
      - mkdir -p ${{CF_VOLUME_PATH}}/.docker
      - echo ${{DOCKERCONFIG}} | base64 -d > ${{CF_VOLUME_PATH}}/.docker/config.json

  obtain_id_token:
    stage: "cosign-sign"
    title: Obtain ID Token
    type: obtain-oidc-id-token:1.2.3
    stage: metadata
    arguments:
      AUDIENCE: 'sigstore'

  reporting:
    title: Reporting
    type: parallel
    stage: metadata
    steps:
      enrich-image:
        stage: build
        title: Report image to Codefresh CD
        type: codefresh-report-image:1.0.10
        working_directory: /code
        fail_fast: false
        arguments:
          CF_API_KEY: ${{CF_API_KEY}}
          CF_IMAGE: "docker.io/aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"
          CF_RUNTIME_NAME: gitops
          CF_CONTAINER_REGISTRY_INTEGRATION: docker-intg
          CF_GITHUB_TOKEN: "${{GITHUB_TOKEN}}"
          CF_GIT_PROVIDER: github
          CF_GIT_REPO: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
          CF_GIT_BRANCH: "master"
          CF_GIT_REVISION: "${{CF_REVISION}}"
          CF_JIRA_INTEGRATION: jira-intg
          CF_JIRA_MESSAGE: "${{CF_COMMIT_MESSAGE_ESCAPED}}"
          CF_JIRA_PROJECT_PREFIX: AP

      # cosign:
      #   title: Cosign Image
      #   image: bitnami/cosign:2
      #   fail_fast: false
      #   commands:
      #     - cp -r ${{CF_VOLUME_PATH}}/.docker /
      #     - cosign sign --key ${{CF_VOLUME_PATH}}/cosign.key aperturesci/rollouts-demo:${{CF_SHORT_REVISION}} -a CICD=Codefresh --yes
      #     - rm ${{CF_VOLUME_PATH}}/cosign.key

      cosign:
        title: Keyless Image cosign
        image: bitnami/cosign:2
        fail_fast: false
        commands:
          - |
            export SIGSTORE_ID_TOKEN=$ID_TOKEN
            cp -r ${{CF_VOLUME_PATH}}/.docker /
            cosign sign --oidc-issuer "https://oidc.codefresh.io" --yes=true aperturesci/rollouts-demo:${{CF_SHORT_REVISION}} -a CICD=Codefresh --yes
            rm -rf ${{CF_VOLUME_PATH}}/.docker

      JiraCommentCreate:
        title: "Add Jira Comment"
        type: jira-issue-manager:1.0.11
        fail_fast: false
        arguments:
          JIRA_API_KEY: ${{JIRA_API_KEY}}
          JIRA_BASE_URL: ${{JIRA_URL}}
          JIRA_USERNAME: ${{JIRA_USER}}
          JIRA_ISSUE_SOURCE_FIELD: "AP-103"
          ACTION: "comment_create"
          COMMENT_BODY: "Color update to ${{COLOR}} in Codefresh build [${{CF_BUILD_ID}}|${{CF_BUILD_URL}}] finished in Codefresh."

      # jira:
      #   type: parallel
      #   stage: build
      #   steps:
      #     jira_issue_extractor:
      #       title: Enrich image with annotations
      #       type: jira-issue-extractor
      #       stage: "build"
      #       arguments:
      #         IMAGE: "docker.io/aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"
      #         JIRA_PROJECT_PREFIX: "AP"
      #         MESSAGE: "${{CF_COMMIT_MESSAGE}}"
      #         JIRA_CONTEXT: jira

      #   enrich_image:
      #     title: Enrich image with annotations
      #     type: image-enricher
      #     stage: test
      #     arguments:
      #       IMAGE: "aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"
      #       BRANCH: "master"
      #       REPO: "aperture-sci/rollouts-demo"
      #       GIT_PROVIDER_NAME: github-lr

  clone_dev:
    title: "Cloning repository for DEV"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/gitops_applications
    revision: "main"
    depth: 1
    stage: dev

  update_dev_manifest:
    description: update the image version for Dev
    image: mikefarah/yq:3.3.4
    working_directory: "/codefresh/volume/gitops_applications"
    stage: dev
    commands:
      - yq w -i manifests/color/dev/kustomization.yaml 'images[0].newTag' "${{CF_SHORT_REVISION}}"

  commit_and_push_dev:
    title: Commit Dev changes and push
    type: git-commit:0.1.3
    stage: dev
    arguments:
      repo: aperture-sci/gitops_applications
      git: github-lr
      working_directory: /codefresh/volume/gitops_applications
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      rebase: true
      add:
        - manifests/color/dev/kustomization.yaml

  sync_dev:
    type: gitops-argocd-sync:1.4.5
    title: Sync ArgoCD app in DEV and wait
    stage: dev
    arguments:
      RUNTIME: gitops
      APPLICATION: color-dev

  approve_qa:
    stage: qa
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone_qa:
    title: "Cloning repository for QA"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/gitops_applications
    revision: "main"
    depth: 1
    stage: qa

  update_qa_manifest:
    description: update the image version for qa
    image: mikefarah/yq:3.3.4
    working_directory: "/codefresh/volume/gitops_applications"
    stage: qa
    commands:
      - yq w -i manifests/color/qa/kustomization.yaml 'images[0].newTag' "${{CF_SHORT_REVISION}}"

  commit_and_push_qa:
    title: Commit changes and push
    type: git-commit:0.1.3
    stage: qa
    arguments:
      repo: aperture-sci/gitops_applications
      git: github-lr
      working_directory: "/codefresh/volume/gitops_applications"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      rebase: true
      add:
        - manifests/color/qa/kustomization.yaml

  sync_qa:
    type: gitops-argocd-sync:1.4.5
    title: Sync ArgoCD app in QA and  wait
    stage: qa
    arguments:
      RUNTIME: gitops
      APPLICATION: color-qa

  approve_staging:
    stage: staging
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone_staging:
    title: "Cloning repository for staging"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/gitops_applications
    revision: "main"
    depth: 1
    stage: staging

  update_staging_manifest:
    description: update the image version for staging
    image: mikefarah/yq:3.3.4
    working_directory: "/codefresh/volume/gitops_applications"
    stage: staging
    commands:
      - yq w -i manifests/color/staging/kustomization.yaml 'images[0].newTag' "${{CF_SHORT_REVISION}}"

  commit_and_push_staging:
    title: Commit changes and push
    type: git-commit:0.1.3
    stage: staging
    arguments:
      repo: aperture-sci/gitops_applications
      git: github-lr
      working_directory: "/codefresh/volume/gitops_applications"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      rebase: true
      add:
        - manifests/color/staging/kustomization.yaml

  sync_staging:
    title: Sync ArgoCD app in staging and  wait
    type: gitops-argocd-sync:1.4.5
    stage: staging
    arguments:
      RUNTIME: gitops
      APPLICATION: color-staging

  approve_prod:
    stage: prod
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone_prod:
    title: "Cloning repository for PROD"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/gitops_applications
    revision: "main"
    depth: 1
    stage: prod

  update_prod_manifest:
    description: update the image version for prod
    image: mikefarah/yq:3.3.4
    working_directory: "/codefresh/volume/gitops_applications"
    stage: prod
    commands:
      - yq w -i manifests/color/prod/kustomization.yaml 'images[0].newTag' "${{CF_SHORT_REVISION}}"

  commit_and_push_prod:
    title: Commit changes and push
    type: git-commit:0.1.3
    stage: prod
    arguments:
      repo: aperture-sci/gitops_applications
      git: github-lr
      working_directory: "/codefresh/volume/gitops_applications"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      rebase: true
      add:
        - manifests/color/prod/kustomization.yaml

  sync_prod:
    title: Sync ArgoCD app in prod and  wait
    type: gitops-argocd-sync:1.4.5
    stage: prod
    arguments:
      RUNTIME: gitops
      APPLICATION: color-prod
