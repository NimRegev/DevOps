version: "1.0"
stages:
 - clone
 - build
 - dev
 - qa
 - staging
 - prod

steps:

  clone:
    title: "Cloning repository"
    stage: clone
    type: "git-clone"
    depth: 1
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_BRANCH}}"
    git: "github"

  pickupColor:
    title: "extract color from commit message"
    stage: clone
    image: ubuntu
    commands:
      - |
        export COLOR=$(echo "${CF_COMMIT_MESSAGE}" | awk -F":" '{print $1}')
        cf_export COLOR=$COLOR

  build:
    title: "Building Docker image"
    type: "build"
    image_name: "aperturesci/rollouts-demo"
    working_directory: "${{clone}}"
    tag: "${{CF_SHORT_REVISION}}"
    dockerfile: "Dockerfile"
    registry: dockerhub
    stage: "build"
    build_arguments:
    - COLOR=${{COLOR}}
    - LATENCY=0
    - ERROR_RATE=0
    metadata:
      set:
        - color: ${{COLOR}}
    on_success:
      annotations:
        set:
          - annotations:
            - sha: ${{CF_SHORT_REVISION}}
            - color: ${{COLOR}}
            display: color

  jira:
    type: parallel
    stage: build
    steps:
      jira-issue-extractor:
        title: Enrich image with annotations
        type: jira-issue-extractor
        stage: "build"
        arguments:
          IMAGE: 'docker.io/aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}'
          JIRA_PROJECT_PREFIX: 'AP'
          MESSAGE: '${{CF_COMMIT_MESSAGE}}'
          JIRA_CONTEXT: jira

      JiraCommentCreate:
        title: "Add Jira Comment"
        type: "jira-issue-manager"
        fail_fast: false
        arguments:
          JIRA_API_KEY: ${{JIRA_API_KEY}}
          JIRA_BASE_URL: ${{JIRA_URL}}
          JIRA_USERNAME: ${{JIRA_USER}}
          JIRA_ISSUE_SOURCE_FIELD: 'AP-103'
          ACTION: "comment_create"
          COMMENT_BODY: "Color update to ${{COLOR}} in Codefresh build [${{CF_BUILD_ID}}|${{CF_BUILD_URL}}] finished in Codefresh."

      enrich-image:
        title: Enrich image with annotations
        type: image-enricher
        stage: test
        arguments:
          IMAGE: 'aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}'
          BRANCH: '${{CF_BRANCH}}'
          REPO: 'aperture-sci/rollouts-demo'
          GIT_PROVIDER_NAME: github-app

  clone_qa:
    title: "Cloning repository for QA"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/DevOps
    revision: "main"
    depth: 1
    stage: qa

  update_qa_manifest:
    description: update the image version for qa
    image: mikefarah/yq:3.3.4
    working_directory: '/codefresh/volume/DevOps'
    stage: qa
    commands:
      - yq w -i manifests/color/aperture-qa/rollout.yaml 'spec.template.spec.containers[0].image' "aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"
      - yq w -i manifests/color/aperture-qa/deployment.yaml 'spec.template.spec.containers[0].image' "aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"

  commit_and_push_qa:
    title: Commit changes and push
    type: git-commit
    stage: qa
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: /codefresh/volume/DevOps
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      rebase: true
      add:
        - manifests/color/aperture-qa/rollout.yaml
        - manifests/color/aperture-qa/deployment.yaml

  sync_qa:
    type: argo-cd-sync:0.4.4
    title: Sync ArgoCD app in QA and  wait
    stage: qa
    arguments:
      RUNTIME: codefresh-hosted
      APPLICATION: color-qa

  approve_staging:
    stage: staging
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  update_staging_manifest:
    description: update the image version for staging
    image: mikefarah/yq:3.3.4
    working_directory: '/codefresh/volume/DevOps'
    stage: staging
    commands:
      - yq w -i manifests/color/aperture-staging/rollout.yaml 'spec.template.spec.containers[0].image' "aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"
      - yq w -i manifests/color/aperture-staging/deployment.yaml 'spec.template.spec.containers[0].image' "aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"

  commit_and_push_staging:
    title: Commit changes and push
    type: git-commit
    stage: staging
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: /codefresh/volume/DevOps
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      rebase: true
      add:
        - manifests/color/aperture-staging/rollout.yaml
        - manifests/color/aperture-staging/deployment.yaml

  sync_staging:
    title: Sync ArgoCD app in staging and  wait
    type: argo-cd-sync:0.4.4
    stage: staging
    arguments:
      RUNTIME: codefresh-hosted
      APPLICATION: color-staging

  approve_prod:
    stage: prod
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  update_prod_manifest:
    description: update the image version for prod
    image: mikefarah/yq:3.3.4
    working_directory: '/codefresh/volume/DevOps'
    stage: prod
    commands:
      - yq w -i manifests/color/aperture-prod/rollout.yaml 'spec.template.spec.containers[0].image' "aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"
      - yq w -i manifests/color/aperture-prod/deployment.yaml 'spec.template.spec.containers[0].image' "aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"

  commit_and_push_prod:
    title: Commit changes and push
    type: git-commit
    stage: prod
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: /codefresh/volume/DevOps
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      rebase: true
      add:
        - manifests/color/aperture-prod/rollout.yaml
        - manifests/color/aperture-prod/deployment.yaml

  sync_prod:
    title: Sync ArgoCD app in prod and  wait
    type: argo-cd-sync:0.4.4
    stage: prod
    arguments:
      RUNTIME: codefresh-hosted
      APPLICATION: color-prod
